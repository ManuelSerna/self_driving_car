#--------------------------------------------------------------------------
# OpenCV Python Tutorial - Find Lanes for Self-Driving Cars (Computer Vision Basics Tutorial)
# *** Look at OpenCV documentation
# Hough detection algorithm
#--------------------------------------------------------------------------
import cv2
import numpy as np
import matplotlib.pyplot as plt  # to clarify how to isolate region of interest (our lane on the road)

#--------------------------------------------------------------------------
# Make coordinates for getting average slope and intercept
#--------------------------------------------------------------------------
def make_coordinates(image, line_parameters):
    slope, intercept = line_parameters
    
    y1 = image.shape[0] #  get y
    y2 = int(y1 * (3/5))
    
    x1 = int((y1 - intercept)/slope)
    x2 = int((y2 - intercept)/slope)
    
    return np.array([x1, y1, x2, y2])

#--------------------------------------------------------------------------
# Get average slope-intercept line
#--------------------------------------------------------------------------
def average_slope_intercept(image, lines):
    left_fit = []  # get left lane
    right_fit = []  # get right lane
    
    for line in lines:
        x1, y1, x2, y2 = line.reshape(4)
        # Polyfit: will fit a first-deg polynomial given points. Give it x's and y's. 1 for a linear function
        parameters = np.polyfit((x1, x2), (y1, y2), 1)
        
        # Left: (-) slope
        # Right: (+) slope
        slope = parameters[0]
        intercept = parameters[1]
        
        if slope < 0:
            left_fit.append((slope, intercept))
        else:
            right_fit.append((slope, intercept))
    
    # Average out all and right left fits. Average slopes and intercepts, so operate vertically (axis = 0).
    left_fit_average = np.average(left_fit, axis = 0)
    right_fit_average = np.average(right_fit, axis = 0)
    
    left_line = make_coordinates(image, left_fit_average)
    right_line = make_coordinates(image, right_fit_average)
    
    return np.array([left_line, right_line])

#--------------------------------------------------------------------------
# Canny algorithm: greyscale, redice noise, and then canny
#--------------------------------------------------------------------------
def canny(image):
    gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
    blur = cv2.GaussianBlur(gray, (5, 5), 0)
    canny = cv2.Canny(blur, 50, 150)
    return canny

#--------------------------------------------------------------------------
# Region of interest: focus on a certain area on an image.
#--------------------------------------------------------------------------
def region_of_interest(image):
    height = image.shape[0]
    polygons = np.array([
     ([(200, height), (1100, height), (550, 250)])
    ])
    
    # Apply triangle shape (defined above) and apply it to a black image with the same dimensions as the original image. So now there is a shape in the black image
    # Note: fillPoly takes in an array of polygons, but here we will just give it one polygon
    mask = np.zeros_like(image)
    cv2.fillPoly(mask, polygons, 255)
    
    masked_image = cv2.bitwise_and(image, mask)
    
    return masked_image

#--------------------------------------------------------------------------
# Display lines
#--------------------------------------------------------------------------
def display_lines(image, lines):
    line_image = np.zeros_like(image)  # same image size as arg image, but black
    
    if lines is not None:
        print('Lines identified as possible lanes')
        # draw a line segment connecting two pts. Give image and two points to connect. Give a color (blue). Then give a thickness to the line
        for x1, y1, x2, y2 in lines:
            cv2.line(line_image, (x1, y1), (x2, y2), (255, 0, 0), 10)  
    
    return line_image

#--------------------------------------------------------------------------
# MAIN program
#--------------------------------------------------------------------------
'''
# Image is a multi-dimensional array containing the relative intensity of each pixel in the image
image = cv2.imread('test_image.jpg')

# Make a copy, so original is NOT altered, and then greyscale using library flag
lane_image = np.copy(image)

canny_image = canny(lane_image)
cropped_image = region_of_interest(canny_image)

# Divide image into bins for the Hough space
# precision of 2 pixels in a single bin. next argument is threshold: min number of votes needed to accept a candidate line (100 votes in our case). Next argument is a placeholder array. 6th argument is the length of the line of pixels that we will accept into the output
lines = cv2.HoughLinesP(cropped_image, 2, np.pi/180, 100, np.array([]), minLineLength=40, maxLineGap=5)

# Get straight lines (not chunks) in our final image
averaged_lines = average_slope_intercept(lane_image, lines)

line_image = display_lines(lane_image, averaged_lines)

# Take the sum of the color image and the line image (adding with black adds zero intensity, so original image does not change).
# Second argument: value to multiply pixel intensities of the first image by, so 0.8 will make things in "lane_image" a bit darker.
# 3rd and 4th args: take image of same size as first arg and multiply its pixels by intensity of 1. So second array will have 20% more weight, so the blue lines will be better defined
# 5th arg: gamma, add some scalar 1
combo_image = cv2.addWeighted(lane_image, 0.8, line_image, 1, 1)

# Display image indefinitely until a key is pressed
#cv2.imshow('result', combo_image)
#cv2.waitKey(0)

# Display the picture with a plot
#plt.imshow(combo_image)
#plt.show()
'''

# Create a video capture object
cap = cv2.VideoCapture("test2.mp4")

while(cap.isOpened()):
    _, frame = cap.read()
    
    canny_image = canny(frame)
    cropped_image = region_of_interest(canny_image)    
    lines = cv2.HoughLinesP(cropped_image, 2, np.pi/180, 100, np.array([]), minLineLength=40, maxLineGap=5)
    averaged_lines = average_slope_intercept(frame, lines)
    line_image = display_lines(frame, averaged_lines)
    combo_image = cv2.addWeighted(frame, 0.8, line_image, 1, 1)
    
    cv2.imshow('result', combo_image)
    if cv2.waitKey(1) == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
